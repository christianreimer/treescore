#! /usr/bin/env python

"""
Extract colors from source images

Usage:
    ranger update --fname=<n> --color=<c> --path=<p> [--fub=<u>] [--flb=<l>]
    ranger new --fname=<n> --color=<c> --path=<p> [--fub=<u>] [--flb=<l>]
    ranger -h | --help

Options:
    --fname=<n> name to from from and save to
    --color=<c> color to classify tuples as
    --path=<p>  path to image files
    --fub=<u>   filter upper bound [default: 750]
    --flb=<l>   filter lower bound [default: 15]
"""

__author__ = "Christian Reimer"
__version__ = "0.0.2"

from docopt import docopt
import glob
from treescore.judge import colors
from treescore.judge import utils
from collections import Counter
import cv2


def main(args):
    if args['update']:
        print('Loading color picker from {}'.format(args['--fname']))
        picker = colors.ColorPicker.from_file(args['--fname'])
    else:
        picker = colors.ColorPicker()

    fnames = glob.glob(args['--path'])
    print('Will proces {} images to define {}'.format(
        len(fnames), args['--color']))

    color_count = Counter()
    for fname in fnames:
        print('Processing {}'.format(fname))
        # img = utils.blur(utils.resize(utils.open_img(fname), 500), (5, 5))
        # img = utils.resize(utils.open_img(fname), 500)
        img = utils.open_img(fname)
        img_filter = utils.filtered_tuples(
            int(args['--flb']), int(args['--fub']))
        color_count.update(img_filter(img))
    total = sum(color_count.values())
    ratios = Counter({t: v / total for t, v in color_count.items()})
    picker.set_ratios(args['--color'], ratios)

    print('Saving color picker as {}'.format(args['--fname']))
    picker.save(args['--fname'])


if __name__ == '__main__':
    args = docopt(__doc__, version='Ranger %s' % __version__ )
    main(args)

